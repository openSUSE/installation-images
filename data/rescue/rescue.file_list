d run var
d run/lock
s ../run var
d dev etc home mnt proc sys tmp root usr/{bin,sbin,lib}
if exists(filesystem, usr/lib64)
d usr/lib64
endif
# filesystem requires compat-usrmerge-tools in usrmerged case, so trigger on that.
if exists(compat-usrmerge-tools)
s usr/bin /bin
s usr/sbin /sbin
s usr/lib /lib
if exists(filesystem, usr/lib64)
s usr/lib64 /lib64
endif
endif
d media/{cdrom,floppy}
c 1777 0 0 tmp
d var/lib/systemd/migrated

# some basic devices
e cp -a /dev/* dev


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# packages without scripts
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

TEMPLATE binutils:
  /
  r /usr/bin/ld
  s ld.bfd /usr/bin/ld

# Some packages use LUA for their pre/post scripts; there's nothing else
# than running rpm to install these - marked with the 'direct' tag.

TEMPLATE system-user-root: direct

TEMPLATE crypto-policies: direct

TEMPLATE system-user-.*|system-group-.*:
  /
  E prein

TEMPLATE nfs-client|device-mapper|rpcbind|rsync|rsyslog|dmraid|multipath-tools:
  /
  E prein
  E postin

TEMPLATE wicked|lvm2|syslog-service|util-linux|mdadm:
  /
  E postin

# ensure /usr/share/pci.ids exists
TEMPLATE hwdata:
  /
  e [ -e usr/share/pci.ids ] || ln -s pci.ids.d/pci.ids.dist usr/share/pci.ids
  e [ -e usr/share/pci.ids ] || { echo "pci ids missing" ; false ; }

TEMPLATE:
  /

# install filesystem first and *REMOVE* /var/run link
filesystem:
  /etc/sysconfig
  /root
  /run
  /var
  # remove temporarily so that 'mount /sys' doesn't work
  r /sys

?compat-usrmerge: ignore
?compat-usrmerge-tools: ignore

AUTODEPS:

dbus-1-x11: ignore
info: ignore
logrotate: ignore
perl-Bootloader: ignore
shared-mime-info: ignore
update-alternatives: ignore
device-mapper-32bit: ignore
binutils: ignore

# update-alternatives & bash-sh split - give up and create expected symlinks manually
# XXX: usrmerge
bash:
  /usr/bin/bash
  s /usr/bin/bash bin/bash
  s /usr/bin/sh bin/sh
  s bash usr/bin/sh

?acpica:
?efibootmgr:
?elilo:
?grub2-i386-pc:
?grub2-x86_64-efi:
?grub2-arm64-efi:
?grub2-arm-efi:
?grub2-powerpc-ieee1275:
?grub2:
?hyper-v:
?iprutils:
?pdisk:
?powerpc-utils:
?powertop:
if arch eq 's390x'
  s390-tools:
endif
?silo:
?wireless-tools:
?wpa_supplicant:
aaa_base-extras:
attr:
bc:
bcache-tools:
bind-utils:
btrfsprogs:
bzip2:
checkmedia:
cifs-utils:
coreutils:
cpio:
cpio-mt:
cracklib-dict-full:
cracklib:
cryptsetup:
curl:
dd_rescue:
diffutils:
dosfstools:
?dracut:
?dracut-fips:
dump:
e2fsprogs:
?exfatprogs:
file-magic:
file:
fillup:
findutils:
finger:
glibc:
gpart:
?gptfdisk:
grep:
gzip:
hdparm:
hex:
hostname:
hwinfo:
icmpinfo:
initviocons:
iproute2:
iputils:
iscsiuio:
jfsutils:
joe:
?kexec-tools:
klogd:
kmod:
?kmod-compat:
kpartx:
krb5:
lsscsi:
mingetty:
ncurses-utils:
netcat-openbsd:
netcfg:
nscd:
ntfsprogs:
nvme-cli:
open-iscsi:
?fcoe-utils:
openslp:
?pam-modules:
parted:
pciutils:
procinfo:
procps:
psmisc:
reiserfs:
sdparm:
sed:
setserial:
sg3_utils:
smartmontools:
smp_utils:
socat:
squashfs:
star:
strace:
suse-module-tools:
?susepaste:
sysconfig:
sysconfig-netconfig:
systemd-presets-branding-<systemd_theme>:
sysuser-shadow:
tar:
terminfo-base:
usbutils:
vlan:
wget:
?wicked:
?xen-tools-domU:
xfsdump:
xfsprogs:
xz:

<release_theme>-release: nodeps

vim-small:
  /
  # avoid update-alternatives
  e cd usr/bin ; if [ -f vim-small ] ; then ln -snf vim-small vim ; ln -snf vim-small vi ;fi

# we have full samba in rescue-server
if filelist ne 'rescue-server'
  if exists(samba-client-libs)
    samba-client-libs: nodeps
      /usr/lib*/libwbclient.*
  else
    samba-libs: nodeps
  endif
      /usr/lib*/samba/lib{replace,winbind-client,genrand,samba-debug,socket-blocking,sys-rw,time-basic,iov-buf}-samba4.so
endif

gawk:
  /usr/bin/gawk
  s gawk usr/bin/awk

if exists(glibc-locale-base)
  glibc-locale: ignore
  glibc-locale-base:
else
  glibc-locale:
endif
  # charset encodings we might possibly need
  /usr/lib*/gconv/IBM1047.so
  /usr/lib*/gconv/ISO8859-1.so
  /usr/lib*/gconv/UNICODE.so
  /usr/lib*/gconv/UTF-16.so
  /usr/lib*/gconv/UTF-32.so
  /usr/lib*/gconv/gconv-modules*

  # built in base system
  d usr/lib
  e cp -a /tmp/locale usr/lib

less:
  /
  r /usr/bin/lesspipe.sh
  t /usr/bin/lesspipe.sh
  c 0755 0 0 /usr/bin/lesspipe.sh
  r /usr/bin/lessopen.sh
  t /usr/bin/lessopen.sh
  c 0755 0 0 /usr/bin/lessopen.sh
  r /usr/bin/lessclose.sh
  t /usr/bin/lessclose.sh
  c 0755 0 0 /usr/bin/lessclose.sh

# XXX: usrmerge
ntfs-3g:
  /
  s mount.ntfs-3g /sbin/mount.ntfs
  s mount.ntfs-3g /usr/sbin/mount.ntfs

pam:
  /
  if exists(pam, /usr/etc/pam.d/common-auth)
    pam_common_auth = /usr/etc/pam.d/common-auth
  else
    pam_common_auth = /etc/pam.d/common-auth
  endif
  R s/(pam_unix\.so.*)$/$1 nullok\n/ <pam_common_auth>

perl-base:
  /usr/bin/perl
  /usr/lib/perl*

perl:
  /usr/lib/perl*

?sbl:
  /
  r /etc/sbl/profile/default
  s y2base /etc/sbl/profile/default

shadow:
  /
  d /etc/skel

sysvinit-tools:
  /
  n /dev/initctl
  c 600 0 0 /dev/initctl

terminfo:
  /usr/share/terminfo/i/ibm3151

:

###
# to keep postin scripts happy
r /sbin/mkinitrd_setup
s /usr/bin/true /sbin/mkinitrd_setup


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# packages with scripts
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

system-group-hardware:
system-group-kvm:
system-user-nobody:

rpm:
  /
  E postin

aaa_base:
  E prein
  /
  t /etc/fstab
  E postin

dbus-1:
  /
  # not needed
  r /usr/bin/dbus-launch*
  E prein
  E postin

polkit:
  /
  E prein

udev:
  /
  E prein
  E postin

systemd:
  /
  E prein

lvm2:
device-mapper:
rpcbind:
rsync:
syslog-service:
rsyslog:
util-linux:
wicked:
?dmraid:
mdadm:
multipath-tools:
nfs-client:
?system-group-wheel:

?openssh-fips:

if exists(openssh-server)
  openssh:
  openssh-server:
else
  openssh:
endif
    /
    E prein
    E postin
    # enable root login bsc#1118114
    R s/^\s*#\s*(PermitRootLogin)\b.*/$1 yes/ /etc/ssh/sshd_config


:

# allow link (old udev package)
D /lib/firmware /usr/lib/firmware

# enable wicked service
s ../wickedd.service usr/lib/systemd/system/multi-user.target.wants
s ../wickedd-auto4.service usr/lib/systemd/system/multi-user.target.wants
s ../wickedd-dhcp4.service usr/lib/systemd/system/multi-user.target.wants
s ../wickedd-dhcp6.service usr/lib/systemd/system/multi-user.target.wants
s ../wickedd-nanny.service usr/lib/systemd/system/multi-user.target.wants
s ../wicked.service usr/lib/systemd/system/multi-user.target.wants

# activate our bashrc
x bashrc root/.profile

# create it now (see filesystem package above)
d /sys

# patch out 'Server' from product name
# sometimes os-release is in /etc, sometimes in /usr/lib
if exists(<release_theme>-release, usr/lib/os-release)
  R s/ Server//g usr/lib/os-release
else
  R s/ Server//g etc/os-release
endif
# generate /etc/issue
x /etc/issue /etc
R s/product_name/<product_name>/g /etc/issue
R s/ Server//g etc/issue

# remove files we don't want to show up at all
r /usr/share/{doc,info,locale,man} /usr/src/packages /usr/share/fillup-templates /var/adm/fillup-templates
r dev/mapper dev/stderr dev/initctl
e find . -name __pycache__ -print0 | xargs -0 rm -rf

# remove grub2 *.module files, they're not needed
# ... and strip *.mod files
if exists(grub2, /usr/lib/grub2)
  r usr/lib/grub2/*/*.module
  S usr/lib/grub2/*/*.mod
elsif exists(grub2)
  r usr/share/grub2/*/*.module
  S usr/share/grub2/*/*.mod
endif

# we better have one...
e touch etc/sysconfig/kernel

# our own mount
e mv usr/bin/mount usr/bin/mount.bin
x mount usr/bin

# XXX: usrmerge
x mount-rootfs-and-do-chroot.sh /bin

# run getty on tty1
d etc/systemd/system/getty.target.wants
s /usr/lib/systemd/system/getty@.service etc/systemd/system/getty.target.wants/getty@tty1.service

# don't try to set mount flags
# it will lead to problems and is not necessary; see bsc #937237 for details
R s/^MountFlags=slave\s*// usr/lib/systemd/system/systemd-udevd.service
R s/^PrivateMounts=.*// usr/lib/systemd/system/systemd-udevd.service

e echo RC_LANG=\"en_US.UTF-8\" >>etc/sysconfig/language

# s390 have their own inittab
#if arch eq 's390' || arch eq 's390x'
#  e sed -i '/getty/d' etc/inittab
#endif

e echo console >>etc/securetty

# enable sysrq
e perl -pi -e '\''s/^(ENABLE_SYSRQ=).*/$1"yes"/'\'' etc/sysconfig/sysctl

# setup multipath config
x etc/multipath.conf /etc
E systemctl enable multipathd

e ldconfig -r .

# now run SuSEconfig
E echo "/dev/root / ext2 defaults 0 0" >/etc/fstab
E echo "proc /proc proc defaults 0 0" >>/etc/fstab
E echo "sysfs /sys sysfs noauto 0 0" >>/etc/fstab
# E echo "usbfs /proc/bus/usb usbfs defaults 0 0" >>/etc/fstab
E echo "devpts /dev/pts devpts mode=0620,gid=5 0 0" >>/etc/fstab

d usr/lib/microcode

# allowed dangling symlinks
D /var/cache/gio-2.0/gnome-defaults.list /usr/share/applications/defaults.list
D /var/cache/gio-2.0/gnome-mimeapps.list /usr/share/applications/gnome-mimeapps.list
D /var/cache/gio-2.0/gnome-mimeapps.list /usr/share/applications/mimeapps.list
D /etc/machine-id /var/lib/dbus/machine-id
