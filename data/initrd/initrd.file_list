d run var
s ../run var
d mnt proc sys tmp mounts root download scripts usr/{bin,sbin,lib}
if exists(filesystem, usr/lib64)
d usr/lib64
endif
# filesystem requires compat-usrmerge-tools in usrmerged case, so trigger on that.
if exists(compat-usrmerge-tools)
s usr/bin /bin
s usr/sbin /sbin
s usr/lib /lib
if exists(filesystem, usr/lib64)
s usr/lib64 /lib64
endif
endif
d dev/pts dev/shm
d etc/sysconfig/hardware etc/YaST2 etc/X11
d var/tmp var/adm/mount
d var/cache/fontconfig var/cache/zypp
d var/lib/YaST2 var/lib/hardware/unique-keys var/lib/autoinstall var/lib/xkb/compiled
d var/lib/systemd/migrated var/lib/polkit var/lib/sshd var/lib/empty
d var/log/cups var/log/YaST2 var/log/zypp
d var/spool var/run/libstorage var/run/hotplug var/run/ntp
d run/dbus run/lock
d usr/share/YaST2

s /run/lock /var/lock
s /run/lock /var/spool/locks

t var/run/utmp

c 1777 0 0 tmp

# some basic devices
e cp -a /dev/* dev


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# packages without scripts
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Some packages use LUA for their pre/post scripts; there's nothing else
# than running rpm to install these - marked with the 'direct' tag.

TEMPLATE system-user-root: direct

TEMPLATE crypto-policies: direct

TEMPLATE:
  /

AUTODEPS:

binutils: ignore
dbus-1-x11: ignore
dirmngr: ignore
fillup: ignore
gnu-unifont-bitmap-fonts: ignore
info: ignore
keyutils: ignore
libcrack*: ignore
libmagic*: ignore
logrotate: ignore
permissions: ignore
pinentry: ignore
suspend: ignore
update-alternatives: ignore
?dracut: ignore
?mkinitrd: ignore
perl: ignore
filesystem: ignore
?biosdevname:
?bcm43xx-firmware: nodeps
bcache-tools:
cpio:
cracklib-dict-full: ignore
curl:
device-mapper:
ethtool:
glibc:
haveged:
hostname:
hwinfo:
iputils:
iscsiuio:
kpartx:
kmod:
?kmod-compat:
krb5:
?libopenssl-3-fips-provider:
lsscsi:
mdadm:
netcfg:
nvme-cli:
sed:
?wicked:
?wicked-nbft:
if arch eq 's390x'
  s390-tools-hmcdrvfs:
endif
rsyslog:
sysconfig-netconfig:
sg3_utils:
systemd-presets-branding-<systemd_theme>:
tar:
tpm2.0-tools:
tpm2.0-abrmd:
util-linux-systemd:
vlan:
which:
?xen-tools-domU:

<release_theme>-release: nodeps

linuxrc:
  if linuxrc
    if linuxrc =~ m#^[^/]#
      m /usr/sbin/<linuxrc> /init
    else
      X <linuxrc> /init
    endif
  else
    m /usr/sbin/linuxrc /init
  endif
  s /lbin/extend /bin
  d /etc/linuxrc.d

# add zypp config to initrd to ensure it's writable
libzypp: nodeps
  /etc
  /var/lib/zypp
  if patch_zypp_config_theme
    # patch /etc/zypp/zypp.conf (fate #321764); sets
    # solver.onlyRequires = true, rpm.install.excludedocs = yes, multiversion =
    R s/^[#[:space:]]*(solver.onlyRequires)\s+=.*/# minimal CAASP\n$1 = true/ etc/zypp/zypp.conf
    R s/^[#[:space:]]*(rpm.install.excludedocs)\s+=.*/# minimal CAASP\n$1 = yes/ etc/zypp/zypp.conf
    R s/^[#[:space:]]*(multiversion)\s+=.*/# minimal CAASP\n$1 =/ etc/zypp/zypp.conf
  endif

if exists(samba-client-libs)
  samba-client-libs: nodeps
    /usr/lib*/libwbclient.*
else
  samba-libs: nodeps
endif
    /usr/lib*/samba/lib{replace,winbind-client,genrand,samba-debug,socket-blocking,sys-rw,time-basic,iov-buf}-samba4.so

# for samba-libs
libgnutls*:

diffutils:
  /usr/bin/cmp

sharutils:
  /usr/bin/uuencode

grep:
  /usr/bin/grep

terminfo-base:
  /usr/share/terminfo

terminfo:
  /usr/share/terminfo/i/ibm3151

?xf86-input-vmmouse:
  /usr/bin/vmmouse_detect

suse-module-tools:
  /etc/modprobe.d

if arch eq 's390x'
  s390-tools:
endif

kbd:
  /usr/bin/dumpkeys
  /usr/bin/loadkeys
  /usr/bin/setfont
  /usr/share/kbd/keymaps
  /usr/share/kbd/consoletrans/koi2alt
  /usr/share/kbd/consoletrans/trivial
  /usr/share/kbd/consolefonts/default8x16.psfu.gz

# XXX: usrmerge
cifs-utils:
  /sbin/mount.cifs
  /usr/sbin/mount.cifs

?acpica:
  /usr/sbin/acpidump

?dmidecode:
  /usr/sbin/dmidecode

# XXX: usrmerge
?bootsplash:
  /sbin/splash
  /usr/sbin/splash

if exists(wpa_supplicant)
  wpa_supplicant:
    /

  wireless-tools:
    /usr/sbin
    /etc
    r /usr/sbin/switch_prism_driver
    r /usr/sbin/install_acx100_firmware
    r /usr/sbin/install_intersil_firmware
endif

coreutils:
  /usr/bin/basename
  /usr/bin/cat
  /usr/bin/chmod
  /usr/bin/chown
  /usr/bin/cp
  /usr/bin/cut
  /usr/bin/date
  /usr/bin/df
  /usr/bin/dirname
  /usr/bin/false
  /usr/bin/head
  /usr/bin/ln
  /usr/bin/ls
  /usr/bin/md5sum
  /usr/bin/mkdir
  /usr/bin/mktemp
  /usr/bin/mv
  /usr/bin/readlink
  /usr/bin/realpath
  /usr/bin/rm
  /usr/bin/rmdir
  /usr/bin/sleep
  /usr/bin/stty
  /usr/bin/tail
  /usr/bin/touch
  /usr/bin/tr
  /usr/bin/true
  /usr/bin/tty
  /usr/bin/uname
  # linuxrc needs it in /bin
  m /usr/bin/rm bin

# update-alternatives & bash-sh split - give up and create expected symlinks manually
# XXX: usrmerge
bash:
  /usr/bin/bash
  s /usr/bin/bash bin/bash
  s /usr/bin/sh bin/sh
  s bash usr/bin/sh
  s bash usr/bin/lsh

ncurses-utils:
  /usr/bin/clear
  /usr/bin/tset

# XXX: usrmerge
iproute2:
  /bin/ip
  /sbin/ip
  /usr/bin/ip
  /usr/sbin/ip

open-iscsi:
  # must be writable
  /etc/iscsi
  c 644 0 0 /etc/iscsi/iscsid.conf


util-linux:
  /usr/sbin/mkswap
  /usr/sbin/swapon
  /usr/bin/more
  /usr/bin/mount
  /usr/bin/umount
  /usr/bin/setsid
  /usr/sbin/losetup
  /usr/sbin/blkid

# XXX: usrmerge
nfs-client:
  /sbin/mount.nfs
  /sbin/mount.nfs4
  /sbin/umount.nfs
  /sbin/umount.nfs4
  /sbin/mount.nfs
  /usr/sbin/mount.nfs4
  /usr/sbin/umount.nfs
  /usr/sbin/umount.nfs4
  /etc/idmapd.conf
  /usr/sbin/rpc.idmapd
  /var/lib/nfs

gpg2:
  /usr/bin/gpg{,2}
  /usr/bin/gpg-agent
  d root/.gnupg

cryptsetup:

# XXX: usrmerge
ntfs-3g:
  /
  s mount.ntfs-3g /sbin/mount.ntfs
  s mount.ntfs-3g /usr/sbin/mount.ntfs

?kexec-tools: nodeps
  /usr/sbin/kexec

# XXX: usrmerge
if exists(blog)
  blog:
    /usr/lib*
    /sbin/showconsole
    /usr/sbin/showconsole

  sysvinit-tools: nodeps
    /sbin/startproc
    /usr/sbin/startproc
else
  sysvinit-tools: nodeps
    /sbin/showconsole
    /sbin/startproc
    /usr/sbin/showconsole
    /usr/sbin/startproc
endif

rpm:
  /usr/bin/rpm2cpio
  /usr/bin/rpmkeys
  /usr/lib*/librpm{,io}.so.*
  /usr/lib/rpm/rpmrc
  # the package contains a symlink to /usr, but we need it writable (bsc#1171733)
  d var/lib/rpm

squashfs:
  /usr/bin/mksquashfs

strace:
  /usr/bin/strace

joe:
  /usr/bin/joe
  /etc/joe/{joerc,ftyperc}

?sbl:
  /
  r /etc/sbl/profile/default
  s y2base /etc/sbl/profile/default

gzip:
  /usr/bin/gzip
  /usr/bin/gunzip

xz:
  /usr/bin/xz

gawk:
  /usr/bin/gawk
  s gawk usr/bin/awk

nscd:
  # remaining files are in root image
  d /var/run/nscd

?virtualbox-guest-tools: nodeps
  /usr/lib/udev/rules.d

?xf86-input-vmmouse: nodeps
  /usr/lib/udev/rules.d

?xf86-input-wacom: nodeps
  /usr/lib/udev/rules.d

shadow:
  /etc
  /usr/etc
  /usr/sbin/groupadd
  /usr/sbin/useradd
  /usr/sbin/useradd.local
  d /etc/skel

# XXX: usrmerge
pam:
  /sbin
  /usr/sbin
  /etc
  /usr/etc
  /lib*/libpam*.so.*
  /lib*/security/pam_group.so
  /lib*/security/pam_unix*.so
  /lib*/security/pam_env.so
  /lib*/security/pam_limits.so
  /lib*/security/pam_umask.so
  /lib*/security/pam_rootok.so
  /lib*/security/pam_permit.so
  /lib*/security/pam_deny.so
  /usr/lib*/libpam*.so.*
  /usr/lib*/security/pam_group.so
  /usr/lib*/security/pam_unix*.so
  /usr/lib*/security/pam_env.so
  /usr/lib*/security/pam_limits.so
  /usr/lib*/security/pam_umask.so
  /usr/lib*/security/pam_rootok.so
  /usr/lib*/security/pam_permit.so
  /usr/lib*/security/pam_deny.so

if exists(plymouth)
  # Do not EVER consider another plymouth theme before ensuring it doesn't
  # drag in tons of weird dependencies (bsc#1182755).
  if exists(plymouth-theme-tribar)
    p_theme = tribar
  # elsif exists(plymouth-theme-XXX)
  #  p_theme = XXX
  else
    p_theme = PLYMOUTH_THEME_IS_MISSING
  endif

  plymouth:
    /
  plymouth-scripts: nodeps
  plymouth-plugin-script:
  plymouth-branding-<plymouth_theme>: nodeps
    /
    e cp usr/share/plymouth/plymouthd.defaults etc/plymouth/plymouthd.conf
  plymouth-theme-<p_theme>:
    /
    R s/^Theme=.*/Theme=<p_theme>/ /etc/plymouth/plymouthd.conf
endif

procps:
  /bin/ps
  /usr/bin/ps

# maybe we don't need everything...
systemd:
  /usr/lib/systemd/systemd-vconsole-setup
  /usr/bin/systemd-detect-virt
  /usr/lib/systemd/systemd-sysctl
  /usr/lib*/systemd/*.so
  # plymouth is not working if we include all rules - no idea why
  /usr/lib/udev/rules.d/99-systemd.rules
  # needed to ensure it's writable
  /etc/sysctl.d

sysconfig:
  /
  m /usr/share/fillup-templates/sysconfig.config-network /etc/sysconfig/network/config
  m /usr/share/fillup-templates/sysconfig.dhcp-network /etc/sysconfig/network/dhcp
  r sbin/rcnetwork

?fcoe-utils:
  /etc

# we add them here so they are writable
autoyast2: nodeps
  /var/lib/autoinstall

# we add them here so they are writable
autoyast2-installation: nodeps
  /var/lib/autoinstall
  /var/adm/autoinstall

# we just need the config files here to ensure they will be writable
lvm2: nodeps
  /etc

# note: locale files are added in root image
if exists(glibc-locale-base)
  glibc-locale: ignore
  glibc-locale-base:
else
  glibc-locale:
endif
  # charset encodings we might possibly need
  /usr/lib*/gconv/IBM1047.so
  /usr/lib*/gconv/ISO8859-1.so
  /usr/lib*/gconv/UNICODE.so
  /usr/lib*/gconv/UTF-16.so
  /usr/lib*/gconv/UTF-32.so
  /usr/lib*/gconv/gconv-modules*

# needed for zram support
e2fsprogs:
  /usr/sbin/mkfs.ext2

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# packages with scripts
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

aaa_base:
  E prein
  /
  # steal them from base image
  e cp /etc/passwd etc
  e cp /etc/group etc
  e cp /etc/shadow etc
  t /run/utmp

dbus-1:
  /
  # not needed
  r /usr/bin/dbus-launch*
  E prein

if exists(openssh-server)
  openssh-server: nodeps
else
  openssh: nodeps
endif
    E prein
    d etc/ssh

system-group-hardware:
  /
  E prein

udev:
  /
  E prein

# we just want the user & group entries
polkit: nodeps
  E prein

# we just want the user & group entries
nscd:
  E prein

# we just want the user & group entries
# FIXME: assumes nobody group exists - maybe time to drop rpcbind?
rpcbind:
  E groupadd -r nobody || true
  E prein

# we just want the user & group entries
openslp-server:
  # The script assumes the group daemon exists (bsc#1196331, bsc#1197222)
  E groupadd -r daemon || true
  E prein

# we just want the user & group entries
chrony: nodeps
  E prein

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# optional extra packages
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if with_gdb
  valgrind:
    /

  # XXX: usrmerge
  kbd:
    /bin/kbd_mode
    /usr/bin/kbd_mode

  strace:
    /usr/bin/strace

  gdb:
    /usr/bin/gdb

  libpython2_6-1_0:
    /usr/lib*

  # XXX: usrmerge
  libexpat1:
    /lib*/libexpat.so.*
    /usr/lib*/libexpat.so.*

  libprocps*:
    /

  # XXX: usrmerge
  psmisc:
    /bin/fuser
    /usr/bin/fuser
    /usr/bin/killall
    /usr/bin/pstree

  coreutils:
    /usr/bin/head
    /usr/bin/tail

  if linuxrc eq ""
    linuxrc-debuginfo:
      /
  endif

  if with_gdb == 2

    linuxrc:
      e mv init sbin

      e echo -e "#! /bin/sh\nexport PATH=/bin:/usr/bin:/sbin:/usr/sbin:/lbin\nPS1=\\\\\\w\>\n/bin/bash\n" >init
      c 755 0 0 init
  endif

  if with_gdb == 3

    linuxrc:
      e mv init sbin

      e echo run >zap
      e echo -e "#! /bin/sh\ngdb --command /zap /sbin/init" >init
      c 755 0 0 init

  endif


  d /lbin
  s /init /lbin/cp
  s /init /lbin/mv
  s /init /lbin/modprobe
  s /init /lbin/rmmod
  s /init /lbin/lsmod
  s /init /lbin/mount
  s /init /lbin/umount
  s /init /lbin/cat
  s /init /lbin/hex
  s /init /lbin/lsof
  s /init /lbin/rm
  s /init /lbin/ln
  s /init /lbin/ls
  s /init /lbin/mkdevs
  s /init /lbin/mkdir
  s /init /lbin/chroot
  s /init /lbin/kill
  s /init /lbin/swapoff
  s /init /lbin/free
  s /init /lbin/fstype
  s /init /lbin/lndir

endif

# certificates are prepared in base.file_list
# here we just copy the files from there
# the packages are listed here just so they show up in the package list later
ca-certificates: nodeps
  /etc/ca-certificates
  /etc/pki
  /usr

ca-certificates-mozilla: nodeps
  # copy ssl certificates
  e cp -a /etc/ssl etc
  e cp -a /var/lib/ca-certificates var/lib

:

d /usr/share/pki/trust/anchors


include theme.file_list

:

# keep this udevd compat symlink, it's no longer in the latest udev package
s /usr/lib/systemd/systemd-udevd /sbin/udevd

# replace issue and motd with our own messages
include texts.file_list

# patch out 'Server' from product name
# sometimes os-release is in /etc, sometimes in /usr/lib
if exists(<release_theme>-release, usr/lib/os-release)
  R s/ Server//g usr/lib/os-release
else
  R s/ Server//g etc/os-release
endif
R s/ Server//g etc/issue

# remove files we don't want to show up at all
r /usr/share/{doc,info,locale,man} /usr/src/packages /usr/share/fillup-templates /var/adm/fillup-templates
r /etc/passwd?* /etc/shadow?* /etc/group?*
r /etc/profile.d
if arch ne 's390' && arch ne 's390x'
  r /boot
endif
r /usr/share/applications/gnome-mimeapps.list

# mtab is symlink now
r /etc/mtab
s /proc/self/mounts /etc/mtab

# override allow_unsupported_modules to allow loading all modules
# this is needed in case kernel-default-{extra,optional} were used
# see bsc#1184413, bsc#1183140
x etc/99-unsupported-modules.conf /etc/modprobe.d

# our own rules file which loads only pnp subsystem mods
x etc/80-drivers.rules /usr/lib/udev/80-drivers.rules.no_modprobe

# udev rules for NVMf autoconnect in the installation system (bsc#1184908)
x etc/90-nvmf-discovery.rules /usr/lib/udev/rules.d

# don't let udev lock the DVD tray
R s/--lock-media/--unlock-media/g usr/lib/udev/rules.d/60-cdrom_id.rules

# systemd service start script
x service_start /bin

# the adddir script used to be in inst-sys but it's needed in initrd, too
x adddir /sbin

# mini host file
x etc/host.conf etc

# we have a custom rsyslog.conf
x etc/rsyslog.conf etc

# additional scripts for linuxrc
x scripts /
# hmc exists only on s390x
if arch ne 's390x'
  r /scripts/url/hmc
endif

# initial /etc/adjtime (bnc #764690)
x etc/adjtime etc

# get us some basic aliases
x etc/bashrc /.profile
x etc/bashrc root/.profile

e ldconfig -r .

# get the gpg keys to trust from build root
d /usr/lib/rpm/gnupg/keys
X /usr/lib/rpm/gnupg/keys /usr/lib/rpm/gnupg
