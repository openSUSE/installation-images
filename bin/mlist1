#! /usr/bin/perl

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the usual fuss...

BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;
use MakeExt2Image;
use AddFiles;
use Conv2Image;

use strict;

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;
$Data::Dumper::Indent = 1;

sub check_deps;
sub add_deps;

die "usage: $Script\n" if @ARGV;

my $md = "${BasePath}tmp/modules-config/modules.dep";
my $ex = "${CfgPath}module.list";
my $deps = "${BasePath}tmp/modules-config/module_deps";
my $list = "${BasePath}tmp/modules-config/module_list";
my $added = "${BasePath}tmp/modules-config/module_added";
my $mod_type = $ConfigData{module_type};

my @ml_all;
my $ml;
my $ex_yes;
my $ex_no;


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
print STDERR "checking module list...\n";

if(open my $f, $md) {
  my ($cnt, $cnt_next);
  while(<$f>) {
    chomp;
    next if /^\s*$/;
    $cnt_next = s/\\$/ / ? 1 : 0;
    if($cnt) {
      @ml_all[-1] .= $_;
    }
    else {
      push @ml_all, $_;
    }
    $cnt = $cnt_next;
  }

  close $f;
}
else {
  die "$0: $md: $!\n";
}


if(open my $f, $ex) {
  while(<$f>) {
    s/\s*$//;
    next if /^\s*(#|$)/;

    if(s/^\-//) {
      $ex_no .= "|$_";
    }
    else {
      $ex_yes .= "|$_";
    }
  }

  close $f;
}
else {
  die "$0: $ex: $!\n";
}

substr($ex_no, 0, 1, "");
substr($ex_yes, 0, 1, "");

for (@ml_all) {
  my ($m, $p);
  my $y = 1;

  s#^(/usr)?/lib/modules/[^/]+/##;
  if(/^(\S+):/) {
    $m = $1;
  }
  else {
    next;
  }

  $y = 0 if $ex_yes && $m !~ /($ex_yes)/;
  $y = 0 if $ex_no && $m =~ /($ex_no)/;

  s#^(\S+)/##;
  $p = $1;
  s#\s\S+/# #g;
  s/\.$mod_type\b//g;
  s/\s+/ /g;
  s/\s+$//;

  if(s/^(\S+):\s*//) {
    if($ml->{$1}) {
      print STDERR "  duplicate modules: $p/$1, $ml->{$1}{path}/$1\n";
    }
    $ml->{$1}{path} = $p;
    $ml->{$1}{config} = $y;
    $ml->{$1}{deps} = [ (split ' ') ];
  }
}

while(add_deps) {}

while(check_deps) {}

open my $w1, ">", $deps;
open my $w2, ">", $list;
open my $w3, ">", $added;

print $w3 "[other]\n";

for (sort { "$ml->{$a}{path} $a" cmp "$ml->{$b}{path} $b" } keys %$ml) {
  next if !$ml->{$_}{config};
  print $w3 "$_\n" if $ml->{$_}{added};
  print $w2 "$ml->{$_}{path}: $_\n";
  if(@{$ml->{$_}{deps}}) {
    print $w1 "$_: ", join(" ", @{$ml->{$_}{deps}}), "\n"
  }
  else {
    print $w1 "$_:\n"
  }
}

close $w3;
close $w2;
close $w1;


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check module dependencies and remove modules with unfulfilled deps
#
sub check_deps
{
  my $cnt;

  for my $m (sort keys %$ml) {
    next if !$ml->{$m}{config};
    for (@{$ml->{$m}{deps}}) {
      if(!$ml->{$_} || !$ml->{$_}{config}) {
        print STDERR "  unresolved deps in $m: $_, dropped\n";
        $ml->{$m}{config} = 0;
        $cnt++;
        last;
      }
    }
  }

  return $cnt;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add required modules to fulfill deps
#
sub add_deps
{
  my $cnt;

  for my $m (sort keys %$ml) {
    next if !$ml->{$m}{config};
    for (@{$ml->{$m}{deps}}) {
      if($ml->{$_} && !$ml->{$_}{config}) {
        print "  auto-added $_\n";
        $ml->{$_}{config} = 1;
        $ml->{$_}{added} = 1;
        $cnt++;
        last;
      }
    }
  }

  return $cnt;
}

